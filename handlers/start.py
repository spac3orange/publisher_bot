from aiogram import Router, types, F
from aiogram.filters import Command
from keyboards.keyboadrs_collection import start_keyboard, yn_keyboard, sendtext_keyboard, publish_keyboard
from aiogram.fsm.context import FSMContext
from loader import bot
from .admin_funcs import send_admin
from templates.admins import ADMINS
from filters.chat_types import ChatTypeFilter
from states.my_states import GetDataState
import json
import os

router = Router()


@router.message(ChatTypeFilter(chat_type=["private"]), Command('start'))
async def start_command(message: types.Message):
    """
        Handle the /start command in private chat.

        Args:
            message (types.Message): The incoming message.

        Returns:
            None
    """
    print('started')
    user_id = message.from_user.id
    print(user_id)
    if user_id != ADMINS:
        key = await start_keyboard()
        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ üëã.\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è',
                             reply_markup=key)


@router.message(ChatTypeFilter(chat_type=["private"]), (F.text == '–ù–∞—á–∞—Ç—å'))
async def send_confirm(message: types.Message, state: FSMContext):
    key = await yn_keyboard()
    await message.answer('–ë—ã–ª–∏ –ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –∫–∞–∫-—Ç–æ —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ —Å –¥—Ä—É–≥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º?',
                         reply_markup=key)
    await state.set_state(GetDataState.answer_input)


@router.message(GetDataState.answer_input, lambda message: message.text in ['–î–∞', '–ù–µ—Ç'])
async def yn_catch(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(id=user_id)
    await state.update_data(answer=message.text)
    user_data = await state.get_data()
    print(user_data)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
    await state.set_state(GetDataState.text_input)


@router.message(GetDataState.text_input, F.text)
async def text_catch(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    user_data = await state.get_data()
    text_value = user_data['text']
    key = await sendtext_keyboard()
    await message.answer('<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>', parse_mode='HTML')
    await message.answer(text_value, reply_markup=key)
    await state.set_state(GetDataState.confirmation_input)


@router.message(GetDataState.confirmation_input, lambda message: message.text in ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å', '–û—Ç–º–µ–Ω–∏—Ç—å'])
async def confirmation_catch(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        user_data = await state.get_data()
        user_id = user_data['id']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω —É–∂–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞–∫–∏–º –∂–µ ID
        id_exists = False
        if os.path.exists('data.txt'):
            with open('data.txt', 'r', encoding='utf-8') as f:
                for line in f:
                    try:
                        existing_data = json.loads(line)
                        if str(existing_data.get("id")) == str(user_id):
                            id_exists = True
                            break
                    except json.JSONDecodeError:
                        continue  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        if not id_exists:
            with open('data.txt', 'a', encoding='utf-8') as f:
                json_data = json.dumps(user_data, ensure_ascii=False)
                f.write(json_data + "\n")
            await send_admin(user_data)
            await message.answer('–°–ø–∞—Å–∏–±–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!')
            await state.clear()
        else:
            await message.answer('–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º.')
            await state.clear()
    else:
        await message.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        await state.clear()


@router.message(ChatTypeFilter(chat_type=["private"]), F.text)
async def unknown(message: types.Message):
    """
    Handle unknown commands.

    Responds to unknown commands with a message.

    Args:
        message (types.Message): The incoming message object.

    Returns:
        None
    """
    await message.answer(text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.")
